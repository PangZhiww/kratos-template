# This is an example .goreleaser.yml file with some sensible defaults.
# Make sure to check the documentation at https://goreleaser.com
before:
  hooks:
    # You may remove this if you don't use go modules.
    - go mod tidy
# your project here
builds:
  - main: ./cmd/server
    id: "server"
    binary: server
    goos:
      - linux
      - windows
      - darwin
    goarch:
      - amd64
      - arm
      - arm64
    hooks:
      pre: go generate ./cmd/server
    # Custom gcflags.

#    gcflags:
#      - all=-trimpath={{.Env.GOPATH}}
#      - ./dontoptimizeme=-N

    # Custom ldflags.
    #
    # Default: '-s -w -X main.version={{.Version}} -X main.commit={{.Commit}} -X main.date={{.Date}} -X main.builtBy=goreleaser'
    # Templates: allowed
#    ldflags:
#      - -s -w -X main.build={{.Version}}
#      - ./usemsan=-msan

    # Custom Go build mode.
    #
    # Valid options:
    # - `c-shared`
    # - `c-archive`
    #
    # Since: v1.13
#    buildmode: c-shared
    env:
      - CGO_ENABLED=0
      # complex, templated envs (v1.14+):
#      - >-
#        {{- if eq .Os "darwin" }}
#          {{- if eq .Arch "amd64"}}CC=o64-clang{{- end }}
#          {{- if eq .Arch "arm64"}}CC=aarch64-apple-darwin20.2-clang{{- end }}
#        {{- end }}
#        {{- if eq .Os "windows" }}
#          {{- if eq .Arch "amd64" }}CC=x86_64-w64-mingw32-gcc{{- end }}
#        {{- end }}


archives:
  - format: tar.gz
    # this name template makes the OS and Arch compatible with the results of uname.
    name_template: >-
      {{ .ProjectName }}_
      {{- title .Os }}_
      {{- if eq .Arch "amd64" }}x86_64
      {{- else if eq .Arch "386" }}i386
      {{- else }}{{ .Arch }}{{ end }}
      {{- if .Arm }}v{{ .Arm }}{{ end }}
    # use zip for windows archives
    format_overrides:
    - goos: windows
      format: zip
checksum:
  name_template: 'checksums.txt'
snapshot:
  name_template: "{{ incpatch .Version }}-next"
changelog:
  sort: asc
  filters:
    exclude:
      - '^docs:'
      - '^test:'



gomod:
  # Proxy a module from proxy.golang.org, making the builds verifiable.
  # This will only be effective if running against a tag. Snapshots will ignore
  # this setting.
  # Notice: for this to work your `build.main` must be a package, not a `.go` file.
  proxy: true

  # If proxy is true, use these environment variables when running `go mod`
  # commands (namely, `go mod tidy`).
  #
  # Default: `os.Environ()` merged with what you set the root `env` section.
  env:
    - GOPROXY=https://goproxy.io,https://goproxy.cn,https://proxy.golang.org,direct
    - GOSUMDB=sum.golang.org
    #- GOPRIVATE=example.com/blah

  # Sets the `-mod` flag value.
  #
  # Since: v1.7
  mod: mod

  # Which Go binary to use.
  #
  # Default: `go`.
  #gobinary: go1.20

